# Makefile for programming the ATtiny85
# modified the one generated by CrossPack

DEVICE      = atmega328p
#CLOCK      = 8000000
CLOCK      = 1000000
PROGRAMMER = -c buspirate
OBJECTS    = main.o EEPM.o EEPM_AVR.o ClockM.o BinaryWatch.o TwoButtonUI.o SleepM.o
OBJECTS_ANALOG    = main.o EEPM.o EEPM_AVR.o ClockM.o AnalogWatch.o TwoButtonUI.o SleepM.o
OBJECTS_BINARY_G    = main.o EEPM.o EEPM_AVR.o ClockM.o BinaryGWatch.o TwoButtonUI.o SleepM.o libs/Bosch_BMA456/Bosch_BMA.o libs/Bosch_BMA456/Bosch_BMA456_config_file.o libs/Bosch_BMA456/spi_adap.o libs/spi/spi.o
HEADERS    = Debouncer.h constants.h types.h settings.h
PORT = /dev/ttyUSB0
# for ATTiny85
# see http://www.engbedded.com/fusecalc/
#FUSES       = -U lfuse:w:0xe2:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m
FUSES       = -U lfuse:w:0x62:m -U hfuse:w:0xD1:m -U efuse:w:0xFF:m

# Tune the lines below only if you know what you are doing:
AVRDUDE = avrdude $(PROGRAMMER) -p $(DEVICE) -P $(PORT)
#COMPILE = avr-gcc -Wall -Os -DF_CPU=$(CLOCK) -mmcu=$(DEVICE)
COMPILE = avr-g++ -Wall -Os -DF_CPU=$(CLOCK) -mmcu=$(DEVICE)

# symbolic targets:
all:	main.hex main_analog.hex main_binG.hex

.c.o:
	$(COMPILE) -c $< -o $@

.cpp.o:
	$(COMPILE) -c $< -o $@

.S.o:
	$(COMPILE) -x assembler-with-cpp -c $< -o $@

.c.s:
	$(COMPILE) -S $< -o $@

flash:	all
	$(AVRDUDE) -U flash:w:main.hex:i

flash_eep:	all
	$(AVRDUDE) -U eeprom:w:eeprom.eep:i

test:	all flash
	putty

flash_all:	flash flash_eep
produce:	fuse flash_all

flash_analog:	main_analog.hex
	$(AVRDUDE) -U flash:w:main_analog.hex:i

flash_eep_analog:	main_analog.hex
	$(AVRDUDE) -U eeprom:w:eeprom_analog.eep:i

test_analog:	main_analog.hex flash_analog
	putty

flash_all_analog:	flash_analog flash_eep_analog
produce_analog:	fuse flash_all_analog

dump:
	$(AVRDUDE) -U eeprom:r:dump.eep:i -U flash:r:dump.hex:i

fuse:
	$(AVRDUDE) $(FUSES)

# Xcode uses the Makefile targets "", "clean" and "install"
install: flash fuse

# if you use a bootloader, change the command below appropriately:
load: all
	bootloadHID main.hex

clean:
	rm -f main.hex main.elf $(OBJECTS)

# file targets:
main.elf: $(OBJECTS) $(HEADERS)
	$(COMPILE) -o main.elf $(OBJECTS)

main_analog.elf: $(OBJECTS_ANALOG) $(HEADERS)
	$(COMPILE) -o main_analog.elf $(OBJECTS_ANALOG)

main_binG.elf: $(OBJECTS_BINARY_G) $(HEADERS)
	$(COMPILE) -o main_binG.elf $(OBJECTS_BINARY_G)

main.hex: main.elf
	rm -f main.hex
	avr-objcopy -j .text -j .data -O ihex main.elf main.hex
	avr-objcopy -j .eeprom -O ihex main.elf eeprom.hex
	avr-objcopy -j .eeprom --set-section-flags=.eeprom="alloc,load" \
   --change-section-lma .eeprom=0 -O ihex main.elf eeprom.eep
	avr-size --format=avr --mcu=$(DEVICE) main.elf

main_analog.hex: main_analog.elf
	rm -f main_analog.hex
	avr-objcopy -j .text -j .data -O ihex main_analog.elf main_analog.hex
	avr-objcopy -j .eeprom -O ihex main_analog.elf eeprom_analog.hex
	avr-objcopy -j .eeprom --set-section-flags=.eeprom="alloc,load" \
   --change-section-lma .eeprom=0 -O ihex main_analog.elf eeprom_analog.eep
	avr-size --format=avr --mcu=$(DEVICE) main_analog.elf

main_binG.hex: main_binG.elf
	rm -f main_binG.hex
	avr-objcopy -j .text -j .data -O ihex main_binG.elf main_binG.hex
	avr-objcopy -j .eeprom -O ihex main_binG.elf eeprom.hex
	avr-objcopy -j .eeprom --set-section-flags=.eeprom="alloc,load" \
   --change-section-lma .eeprom=0 -O ihex main_binG.elf eeprom_binG.eep
	avr-size --format=avr --mcu=$(DEVICE) main_binG.elf
# If you have an EEPROM section, you must also create a hex file for the
# EEPROM and add it to the "flash" target.

# Targets for code debugging and analysis:
disasm:	main.elf
	avr-objdump -d main.elf

cpp:
	$(COMPILE) -E main.c
